Python class 

What is the primary purpose of the __init__ method in a class?

a) Initialize a class variable
b) Initialize an object
c) Overload operators
d) Delete an object
Answer: b) Initialize an object
Explanation: The __init__ method is a constructor used to initialize object attributes when a new instance of the class is created.
Which keyword is used to define a class in Python?

a) def
b) func
c) class
d) init
Answer: c) class
Explanation: The class keyword is used to define a new class in Python.
What does self represent in a class method?

a) A reference to the method itself
b) A reference to the current class
c) A reference to the class variable
d) A reference to the instance of the class
Answer: d) A reference to the instance of the class
Explanation: self refers to the current instance of the class and is used to access variables and methods associated with the instance.
What is the correct syntax to define a class?

a) class myClass():
b) class myClass[]:
c) class myClass{}:
d) class myClass<>:
Answer: a) class myClass():
Explanation: In Python, the correct syntax to define a class uses the class keyword followed by the class name and parentheses ().
Which of the following statements is true about inheritance in Python?

a) A derived class cannot override the base class methods.
b) A class can only inherit from one class.
c) A class can inherit from multiple classes.
d) Python does not support inheritance.
Answer: c) A class can inherit from multiple classes.
Explanation: Python supports multiple inheritance, allowing a class to inherit attributes and methods from more than one parent class.
Which method is called when an object is deleted?

a) __del__
b) __delete__
c) __terminate__
d) __remove__
Answer: a) __del__
Explanation: The __del__ method is a destructor that is called when an object is deleted or garbage-collected.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x=1):
        self.x = x
        
a = A()
print(a.x)
a) 0
b) 1
c) Error
d) None
Answer: b) 1
Explanation: The default value of x is set to 1, so when the instance a is created, a.x will be 1.
How do you define a method inside a class?

a) Use the function keyword.
b) Use the func keyword.
c) Use the method keyword.
d) Use the def keyword.
Answer: d) Use the def keyword.
Explanation: In Python, the def keyword is used to define methods (functions) inside a class.
Which of the following is used to make a class method private?

a) Prefix the method name with a double underscore (__).
b) Prefix the method name with a single underscore (_).
c) Suffix the method name with a double underscore (__).
d) Suffix the method name with a single underscore (_).
Answer: a) Prefix the method name with a double underscore (__).
Explanation: Methods prefixed with a double underscore become private and are not directly accessible outside the class.
What is method overriding?

a) Defining a new method with the same name as an inherited method.
b) Defining two methods with the same name in the same class.
c) Defining a method that overrides the class definition.
d) Overloading a method with different parameters.
Answer: a) Defining a new method with the same name as an inherited method.
Explanation: Method overriding allows a subclass to provide a specific implementation for a method that is already defined in the parent class.
What is the use of the super() function?

a) It initializes a class.
b) It calls the __init__ method of a base class.
c) It creates a new object.
d) It terminates the class.
Answer: b) It calls the __init__ method of a base class.
Explanation: super() is used to call the methods of a parent class, especially the constructor (__init__), in a subclass.
Which of the following defines a class with a single method?

a) class MyClass: def method(): pass
b) class MyClass[]: method()
c) class MyClass: function()
d) MyClass: method()
Answer: a) class MyClass: def method(): pass
Explanation: This defines a class MyClass with a single method method() that does nothing (pass is a placeholder).
How do you access the class attribute from within a method?

a) self.<attribute>
b) <class>.<attribute>
c) cls.<attribute>
d) Both a and b
Answer: d) Both a and b
Explanation: A class attribute can be accessed using either self (if referring to it in an instance context) or the class name itself in class-level contexts.
Which of the following is the correct way to inherit a class in Python?

a) class Derived(Base)
b) class Derived->Base
c) class Derived.Base
d) class Derived=Base
Answer: a) class Derived(Base)
Explanation: In Python, inheritance is represented by the base class name in parentheses following the derived class name.
What happens when you use the del statement on an object?

a) The object is removed from memory immediately.
b) The reference count for the object is reduced by one.
c) The __del__ method is called.
d) Both b and c
Answer: d) Both b and c
Explanation: Using del reduces the reference count, and if it reaches zero, the __del__ method is called and the object is eventually deleted.
How do you declare a class variable in Python?

a) Inside the __init__ method.
b) Outside all methods in the class.
c) In the def method.
d) By using the self keyword.
Answer: b) Outside all methods in the class.
Explanation: Class variables are declared outside any methods, at the class level, and are shared among all instances.
Which of the following statements is true about multiple inheritance in Python?

a) Python does not support multiple inheritance.
b) A class can inherit from multiple classes.
c) Python only supports two levels of inheritance.
d) None of the above.
Answer: b) A class can inherit from multiple classes.
Explanation: Python supports multiple inheritance, allowing a class to inherit from more than one base class.
How is polymorphism achieved in Python classes?

a) By using method overloading.
b) By using method overriding.
c) By using operator overloading.
d) Both b and c.
Answer: d) Both b and c.
Explanation: Polymorphism in Python can be achieved through method overriding (in inheritance) and operator overloading (customizing behavior of operators).
Which method should be implemented to make an object iterable?

a) __next__()
b) __iter__()
c) __get__()
d) __set__()
Answer: b) __iter__()
Explanation: The __iter__() method is used to make an object iterable, and it returns an iterator object.
What is the output of the following code?

python
Copy code
class A:
    def





You said:
continue
ChatGPT said:
ChatGPT
Batch 2 (Questions 21-40)
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x=1):
        self.x = x

a = A(5)
b = A()
print(a.x, b.x)
a) 5 1
b) 5 0
c) 1 1
d) Error
Answer: a) 5 1
Explanation: a is initialized with x=5, and b uses the default value of x=1 provided in the constructor.
How do you create a class with private attributes?

a) Prefix the attribute name with a single underscore.
b) Prefix the attribute name with a double underscore.
c) Use the private keyword.
d) Python does not support private attributes.
Answer: b) Prefix the attribute name with a double underscore.
Explanation: In Python, private attributes are created by prefixing their names with double underscores (__).
What is the correct way to access a private attribute of a class from outside the class?

a) self.<attribute>
b) <class>.<attribute>
c) _ClassName__<attribute>
d) <attribute>
Answer: c) _ClassName__<attribute>
Explanation: Private attributes are name-mangled in Python, and to access them, you need to use _ClassName__<attribute>.
What is method overloading in Python?

a) Defining a method with different parameter types in the same class.
b) Defining multiple methods with the same name but different arguments.
c) Defining multiple methods with different return types.
d) Python does not support method overloading.
Answer: d) Python does not support method overloading.
Explanation: Python does not support traditional method overloading as found in some other languages. Instead, method behavior can be controlled by using default arguments or *args.
Which of the following is true about class variables?

a) They are defined within methods.
b) They are shared across all instances of the class.
c) They are unique to each instance of the class.
d) They are defined within the constructor.
Answer: b) They are shared across all instances of the class.
Explanation: Class variables are shared by all instances of the class, unlike instance variables, which are unique to each object.
What happens if you define a method in a derived class with the same name as in the base class?

a) It will cause an error.
b) The base class method will be overridden.
c) Both methods will be called.
d) The derived class method will be ignored.
Answer: b) The base class method will be overridden.
Explanation: When a method in the derived class has the same name as a method in the base class, it overrides the base class method.
What is the purpose of the __str__ method?

a) To delete the object.
b) To return a string representation of an object.
c) To initialize an object.
d) To check for equality between two objects.
Answer: b) To return a string representation of an object.
Explanation: The __str__ method is used to define how an object is represented as a string, typically used in print().
Which method is called when an object is copied?

a) __copy__
b) __new__
c) __clone__
d) __deepcopy__
Answer: a) __copy__
Explanation: The __copy__ method is used when an object is shallow copied. For deep copies, __deepcopy__ is used.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 1
        
    def display(self):
        print(self.x)

class B(A):
    def __init__(self):
        self.x = 5

b = B()
b.display()
a) 5
b) 1
c) Error
d) None
Answer: c) Error
Explanation: The constructor of class B does not call the constructor of class A. Hence, the display() method tries to access x, but it is not inherited from A.
Which of the following methods is used to make an object callable like a function?

a) __call__
b) __func__
c) __init__
d) __new__
Answer: a) __call__
Explanation: The __call__ method allows an instance of a class to be called as a function.
What is the output of the following code?

python
Copy code
class A:
    def method(self):
        return 'A method'

class B(A):
    def method(self):
        return 'B method'

a = A()
b = B()
print(a.method(), b.method())
a) 'A method' 'A method'
b) 'A method' 'B method'
c) 'B method' 'B method'
d) 'B method' 'A method'
Answer: b) 'A method' 'B method'
Explanation: a is an instance of A, and b is an instance of B. The method of A is called on a, while the overridden method of B is called on b.
Which method is called when an object is created?

a) __create__
b) __new__
c) __init__
d) __start__
Answer: b) __new__
Explanation: The __new__ method is responsible for creating a new instance of a class. Afterward, __init__ is called to initialize it.
Which method is used to compare two objects for equality?

a) __eq__
b) __cmp__
c) __compare__
d) __equal__
Answer: a) __eq__
Explanation: The __eq__ method is used to compare two objects for equality.
How do you define a static method in a Python class?

a) Using the @staticmethod decorator.
b) Using the static keyword.
c) Using the @classmethod decorator.
d) Static methods are not supported in Python.
Answer: a) Using the @staticmethod decorator.
Explanation: The @staticmethod decorator is used to define a static method, which does not operate on instance variables.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, val=2):
        self.val = val

    def method(self, val):
        self.val += val
        return self.val

a = A()
print(a.method(3))
a) 5
b) 3
c) 2
d) Error
Answer: a) 5
Explanation: The initial value of val is 2. When method(3) is called, self.val becomes 2 + 3 = 5.
What is a metaclass in Python?

a) A class for managing memory.
b) A class for defining class behavior.
c) A class for creating other classes.
d) A class for garbage collection.
Answer: c) A class for creating other classes.
Explanation: A metaclass is a class whose instances are other classes, and it defines the behavior of those classes.
What is the correct way to define a class method?

a) Use the @staticmethod decorator.
b) Use the @classmethod decorator.
c) Use the @property decorator.
d) Use the def keyword without any decorator.
Answer: b) Use the @classmethod decorator.
Explanation: A class method is defined using the @classmethod decorator and takes cls as its first parameter.
What is the output of the following code?

python
Copy code
class A:
    x = 10
    
class B(A):
    pass

b = B()
print(b.x)





You said:
continue
ChatGPT said:
ChatGPT
Batch 3 (Questions 41-60)
What is the output of the following code?

python
Copy code
class A:
    x = 10
    
class B(A):
    pass

b = B()
print(b.x)
a) 10
b) Error
c) None
d) 0
Answer: a) 10
Explanation: Since B inherits from A, and A has a class variable x = 10, the instance b of class B can access x from class A.
What is the use of the @property decorator?

a) To define a method as static.
b) To make an attribute read-only.
c) To convert a method into a class method.
d) To define a method as private.
Answer: b) To make an attribute read-only.
Explanation: The @property decorator is used to create getter methods that make an attribute behave like a read-only property.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

    def display(self):
        return self.x

a = A(7)
b = A(8)
print(a.display(), b.display())
a) 7 7
b) 8 8
c) 7 8
d) Error
Answer: c) 7 8
Explanation: The instances a and b have separate x values (7 and 8, respectively), which are returned by their respective display() methods.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 1

    def method(self):
        self.x += 1
        return self.x

a = A()
print(a.method())
print(a.method())
a) 1 1
b) 2 3
c) 3 4
d) Error
Answer: b) 2 3
Explanation: In the first call to method(), x is incremented to 2. In the second call, x is incremented again to 3.
What happens if you define a method in a class without self as the first argument?

a) The method will act as a class method.
b) The method will act as a static method.
c) It will raise a TypeError.
d) The method will not have access to instance variables.
Answer: c) It will raise a TypeError.
Explanation: If a method in a class is defined without self as the first argument, it will raise a TypeError when called from an instance because Python expects instance methods to take self as their first argument.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

class B(A):
    def __init__(self, x, y):
        super().__init__(x)
        self.y = y

b = B(3, 4)
print(b.x, b.y)
a) 3 4
b) 4 3
c) Error
d) None
Answer: a) 3 4
Explanation: The super() call in class B calls the __init__ method of class A, initializing x. Then, y is initialized in class B. Thus, b.x = 3 and b.y = 4.
Which of the following correctly creates an instance of a class?

a) A obj = new A()
b) obj = new A()
c) obj = A()
d) A obj = A()
Answer: c) obj = A()
Explanation: In Python, objects are created by calling the class name followed by parentheses, i.e., obj = A().
How do you create a class with no members?

a) class A:
b) class A: pass
c) class A():
d) class A(): pass
Answer: b) class A: pass
Explanation: In Python, pass is used as a placeholder when a block of code is required syntactically but no action is needed. This creates a class with no members.
Which method is used to initialize a new object in Python?

a) __new__
b) __create__
c) __init__
d) __start__
Answer: c) __init__
Explanation: The __init__ method is used to initialize the attributes of a new object when it is created.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 10

class B(A):
    def __init__(self):
        A.__init__(self)
        self.y = 5

b = B()
print(b.x, b.y)
a) 10 5
b) 5 10
c) Error
d) None
Answer: a) 10 5
Explanation: The __init__ method of class A is called explicitly inside class B, so b.x is set to 10, and b.y is set to 5.
How is encapsulation achieved in Python classes?

a) Using the private keyword.
b) By making attributes and methods private using double underscores (__).
c) By creating a constructor.
d) By using self.
Answer: b) By making attributes and methods private using double underscores (__).
Explanation: Encapsulation is achieved by making variables and methods private using double underscores, which prevents them from being accessed directly outside the class.
Which of the following is true about the __repr__ method?

a) It is used to provide a human-readable string representation of an object.
b) It is used to provide an official string representation of an object for debugging.
c) It is used to delete an object.
d) It is used to compare two objects.
Answer: b) It is used to provide an official string representation of an object for debugging.
Explanation: The __repr__ method provides a string representation of the object that is suitable for debugging and logging.
What is the output of the following code?

python
Copy code
class A:
    x = 5
    
    def __init__(self, y):
        self.y = y

a = A(10)
print(a.x, a.y)
a) 10 10
b) 5 10
c) Error
d) 5 5
Answer: b) 5 10
Explanation: x is a class variable, so it is accessed as a.x, which is 5. y is an instance variable, so it is specific to the object a, and its value is 10.
Which method is used to delete an attribute of an object?

a) __delete__()
b) __delattr__()
c) __del__()
d) __removeattr__()
Answer: b) __delattr__()
Explanation: The __delattr__() method is used to delete an attribute from an object.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 1

a1 = A()
a2 = A()

print(a1 == a2)
a) True
b) False
c) Error
d) None
Answer: b) False
Explanation: Even though both a1 and a2 have the same attributes, they are different instances, so the equality check (a1 == a2) returns False unless the __eq__ method is explicitly defined.
Which method is automatically called when an object is created?

a) __create__()
b) __start__()
c) __new__()
d) __init__()
**Answer





You said:
continue
ChatGPT said:
ChatGPT
Answer: d) __init__()
Explanation: The __init__() method is automatically called when an object is created, and it is used to initialize the object's attributes.

Batch 4 (Questions 61-80)
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, val):
        self.val = val

    def __eq__(self, other):
        return self.val == other.val

a1 = A(5)
a2 = A(5)
print(a1 == a2)
a) True
b) False
c) Error
d) None
Answer: a) True
Explanation: Since the __eq__ method is defined to compare the val attributes of two instances, the objects a1 and a2 are considered equal because both have val = 5.
What is the output of the following code?

python
Copy code
class A:
    x = 0

    def __init__(self):
        A.x += 1

a1 = A()
a2 = A()
print(A.x)
a) 0
b) 1
c) 2
d) Error
Answer: c) 2
Explanation: A.x is a class variable, and it is incremented every time an instance of class A is created. Since two instances are created, A.x becomes 2.
What is the use of __del__ method in Python classes?

a) To delete an object.
b) To delete an attribute of an object.
c) To define a destructor.
d) To free up memory.
Answer: c) To define a destructor.
Explanation: The __del__ method is called when an object is about to be destroyed and is used to define destructors in Python classes.
What is inheritance in Python?

a) Creating a new class from an existing class.
b) Overriding methods of a base class.
c) Hiding data members.
d) None of the above.
Answer: a) Creating a new class from an existing class.
Explanation: Inheritance allows a new class (derived class) to inherit attributes and methods from an existing class (base class).
What is the purpose of super() in Python?

a) To call the base class constructor.
b) To create an instance of the base class.
c) To override methods of the base class.
d) To call methods of the base class.
Answer: d) To call methods of the base class.
Explanation: The super() function is used to call methods of the base class in the derived class.
What is the output of the following code?

python
Copy code
class A:
    def method(self):
        print('A method')

class B(A):
    def method(self):
        super().method()
        print('B method')

b = B()
b.method()
a) 'A method'
b) 'B method'
c) 'A method' 'B method'
d) Error
Answer: c) 'A method' 'B method'
Explanation: The super() call in class B invokes the method() of class A, followed by the execution of method() in class B.
Which of the following is NOT a method in Python classes?

a) __str__
b) __add__
c) __repr__
d) __len__
Answer: d) __len__
Explanation: __len__ is not a method of Python classes by default but can be defined by the user to return the length of an object. The other options are standard Python methods.
What is polymorphism in Python?

a) A class having multiple constructors.
b) A method that can perform different functions.
c) A method that can return different data types.
d) None of the above.
Answer: b) A method that can perform different functions.
Explanation: Polymorphism in Python refers to the ability of different classes to respond to the same method in different ways.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 1

    def __call__(self):
        self.x += 1
        return self.x

a = A()
print(a(), a())
a) 1 1
b) 2 3
c) 2 2
d) Error
Answer: b) 2 3
Explanation: The __call__ method makes the object callable. The first call increments x to 2, and the second increments x to 3.
Which method is used to initialize a class?

a) __call__()
b) __new__()
c) __init__()
d) __start__()
Answer: c) __init__()
Explanation: The __init__() method is used to initialize the attributes of an object after it is created.
What is the use of __call__ method in Python?

a) To create an instance of a class.
b) To make an object callable.
c) To delete an object.
d) To initialize an object.
Answer: b) To make an object callable.
Explanation: The __call__ method allows an instance of a class to be called as if it were a function.
What is the output of the following code?

python
Copy code
class A:
    x = 10

class B(A):
    pass

b = B()
b.x = 5
print(A.x, B.x, b.x)
a) 10 10 5
b) 5 5 5
c) 10 5 5
d) Error
Answer: a) 10 10 5
Explanation: b.x is an instance variable that only affects the object b. A.x and B.x are class variables, which remain unchanged.
What does the @staticmethod decorator do in Python?

a) It makes a method static.
b) It allows a method to access class-level attributes.
c) It allows a method to access instance-level attributes.
d) It makes a method private.
Answer: a) It makes a method static.
Explanation: The @staticmethod decorator makes a method static, meaning it does not operate on an instance of the class.
What is the purpose of the __getattr__() method in Python?

a) To define how missing attributes are handled.
b) To create a private attribute.
c) To compare two objects.
d) To initialize an object.
Answer: a) To define how missing attributes are handled.
Explanation: The __getattr__() method is called when an attribute is accessed that does not exist in the object.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 10

a1 = A()
a2 = a1
a2.x = 20
print(a1.x)
a) 10
b) 20
c) Error
d) None
Answer: b) 20
Explanation: a2 is a reference to a1, so any changes made to a2.x also affect a1.x.
Which method is used to delete an object in Python?

a) __del__()
b) __delete__()
c) __delattr__()
d) __remove__()
Answer: a) __del__()
Explanation: The __del__() method acts as a destructor in Python and is called when an object is about to be destroyed.
I'll continue with the final set of questions next!






You said:
continue
ChatGPT said:
ChatGPT
Batch 5 (Questions 81-100)
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

    def __lt__(self, other):
        return self.x < other.x

a1 = A(3)
a2 = A(5)
print(a1 < a2)
a) True
b) False
c) Error
d) None
Answer: a) True
Explanation: The __lt__ method is defined to compare the x attributes of two objects. Since a1.x (3) is less than a2.x (5), the output is True.
Which method is called when an object is printed using print()?

a) __print__()
b) __str__()
c) __repr__()
d) __call__()
Answer: b) __str__()
Explanation: The __str__() method is called to generate a string representation of an object when it is printed using the print() function.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 10

    def __add__(self, other):
        return self.x + other.x

a1 = A()
a2 = A()
a2.x = 20
print(a1 + a2)
a) 10
b) 20
c) 30
d) Error
Answer: c) 30
Explanation: The __add__() method defines how objects are added. The x attributes of a1 and a2 are added, resulting in 10 + 20 = 30.
Which of the following methods is used to compare two objects for equality?

a) __cmp__()
b) __compare__()
c) __eq__()
d) __lt__()
Answer: c) __eq__()
Explanation: The __eq__() method is used to compare two objects for equality. It is called when the == operator is used.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 10

    def __mul__(self, other):
        return self.x * other.x

a1 = A()
a2 = A()
a2.x = 5
print(a1 * a2)
a) 10
b) 50
c) 15
d) Error
Answer: b) 50
Explanation: The __mul__() method is used to multiply the x attributes of two objects, resulting in 10 * 5 = 50.
What is the use of the __getitem__() method in Python?

a) To get an item from a list.
b) To access an attribute of an object.
c) To allow object indexing like a list or dictionary.
d) To delete an item from a list.
Answer: c) To allow object indexing like a list or dictionary.
Explanation: The __getitem__() method is used to allow objects to be accessed using index notation, similar to lists or dictionaries.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.data = [1, 2, 3, 4, 5]

    def __getitem__(self, index):
        return self.data[index]

a = A()
print(a[2])
a) 1
b) 2
c) 3
d) Error
Answer: c) 3
Explanation: The __getitem__() method allows the object a to be indexed like a list. The element at index 2 in the list [1, 2, 3, 4, 5] is 3.
Which method is used to represent an object as a string for debugging purposes?

a) __debug__()
b) __str__()
c) __repr__()
d) __call__()
Answer: c) __repr__()
Explanation: The __repr__() method provides a string representation of the object that is used for debugging and logging.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 5

    def __repr__(self):
        return f'Object with x={self.x}'

a = A()
print(a)
a) Object with x=5
b) <__main__.A object at ...>
c) 5
d) Error
Answer: a) Object with x=5
Explanation: The __repr__() method defines how an object is represented when printed. In this case, it returns the string Object with x=5.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, val):
        self.val = val

    def __add__(self, other):
        return A(self.val + other.val)

    def __repr__(self):
        return f'A({self.val})'

a1 = A(5)
a2 = A(10)
a3 = a1 + a2
print(a3)
a) A(5)
b) A(10)
c) A(15)
d) Error
Answer: c) A(15)
Explanation: The __add__() method adds the val attributes of a1 and a2 and returns a new A object with val = 15.
Final Batch (Questions 81-100)
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

a = A(5)
b = A(5)
print(a is b)
a) True
b) False
c) Error
d) None
Answer: b) False
Explanation: a and b are two different instances of class A, so the is operator returns False since they are not the same object in memory.
Which of the following is used to handle missing attributes in Python?

a) __missing__()
b) __getattr__()
c) __getattribute__()
d) __getitem__()
Answer: b) __getattr__()
Explanation: The __getattr__() method is called when an attribute that doesn’t exist is accessed.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.x = 5

    def __len__(self):
        return self.x

a = A()
print(len(a))
a) 5
b) Error
c) 0
d) None
Answer: a) 5
Explanation: The __len__() method defines the length of an object, so len(a) returns 5.
Which method is used to define the behavior of the in operator?

a) __contains__()
b) __in__()
c) __check__()
d) __has__()
Answer: a) __contains__()
Explanation: The __contains__() method is used to define how the in operator behaves for an object.
What is the purpose of the __iter__() method in Python?

a) To iterate over an object.
b) To delete an object.
c) To convert an object into a list.
d) To initialize an object.
Answer: a) To iterate over an object.
Explanation: The __iter__() method returns an iterator object, allowing the object to be iterated over in a loop.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self):
        self.data = [1, 2, 3]

    def __iter__(self):
        return iter(self.data)

a = A()
for x in a:
    print(x, end=' ')
a) 1 2 3
b) Error
c) 0 1 2
d) None
Answer: a) 1 2 3
Explanation: The __iter__() method returns an iterator over the data list, so the loop prints each element of the list.
What is the use of __next__() method in Python?

a) To return the next element of an iterator.
b) To reset an iterator.
c) To skip the next element of an iterator.
d) To delete an object.
Answer: a) To return the next element of an iterator.
Explanation: The __next__() method returns the next element from an iterator until the iteration is complete.
What is the purpose of the __exit__() method in Python?

a) To handle exceptions in a try-except block.
b) To define cleanup actions in a with statement.
c) To terminate a loop.
d) To close a file.
Answer: b) To define cleanup actions in a with statement.
Explanation: The __exit__() method is called when a block inside a with statement is exited, typically used for cleanup operations like closing a file.
Which method is used to check if an object has a particular attribute?

a) hasattr()
b) getattr()
c) setattr()
d) checkattr()
Answer: a) hasattr()
Explanation: The hasattr() function checks if an object has a particular attribute and returns True if it does, otherwise False.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

    def __contains__(self, item):
        return item in self.x

a = A([1, 2, 3])
print(2 in a)
a) True
b) False
c) Error
d) None
Answer: a) True
Explanation: The __contains__() method checks if the item 2 is in the list [1, 2, 3] in a.x, so it returns True.
I hope these questions are helpful for your practice! Let me know if you need any more assistance!






You said:
continue
ChatGPT said:
ChatGPT
Batch 6 (Questions 91-100)
Which method is used to set an attribute of an object in Python?

a) getattr()
b) setattr()
c) hasattr()
d) __setattr__()
Answer: b) setattr()
Explanation: The setattr() function is used to set the value of an attribute of an object. The method __setattr__() can also be overridden in a class for custom behavior.
What is the purpose of the __new__() method in Python?

a) To create a new object.
b) To initialize a new object.
c) To delete an object.
d) To compare two objects.
Answer: a) To create a new object.
Explanation: The __new__() method is responsible for creating a new instance of a class. It is called before __init__() and is rarely overridden unless you're implementing custom object creation logic.
What is the output of the following code?

python
Copy code
class A:
    def __new__(cls):
        return object.__new__(cls)

    def __init__(self):
        print("Initialized")

a = A()
a) Error
b) Initialized
c) None
d) "Initialized" printed, no return
Answer: d) "Initialized" printed, no return
Explanation: The __new__() method creates a new instance of class A, and then the __init__() method initializes it. The string "Initialized" is printed.
Which of the following methods is called when an object is accessed for reading?

a) __setattr__()
b) __getattr__()
c) __delattr__()
d) __getitem__()
Answer: b) __getattr__()
Explanation: The __getattr__() method is called when an attribute that doesn’t exist is accessed for reading. For existing attributes, Python calls __getattribute__().
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

    def __setattr__(self, name, value):
        self.__dict__[name] = value * 2

a = A(5)
print(a.x)
a) 5
b) 10
c) Error
d) None
Answer: b) 10
Explanation: The __setattr__() method is overridden to multiply any value assigned to attributes by 2. So when x is assigned the value 5, it is stored as 10.
Which method is called when an object is deleted?

a) __delattr__()
b) __delete__()
c) __del__()
d) __destroy__()
Answer: c) __del__()
Explanation: The __del__() method is called when an object is about to be destroyed by the garbage collector, acting as a destructor in Python.
What is the output of the following code?

python
Copy code
class A:
    def __init__(self, x):
        self.x = x

    def __del__(self):
        print("Object deleted")

a = A(10)
del a
a) Object deleted
b) None
c) Error
d) No output
Answer: a) Object deleted
Explanation: When del a is called, the __del__() method is triggered, printing "Object deleted" as the object is destroyed.
What is the use of the __copy__() method in Python?

a) To create a shallow copy of an object.
b) To create a deep copy of an object.
c) To compare two objects.
d) To clone an object.
Answer: a) To create a shallow copy of an object.
Explanation: The __copy__() method allows an object to define how a shallow copy of itself should be made. Shallow copies only copy the object itself, not the objects it references.
Which of the following is called when an object is converted to a string?

a) __str__()
b) __repr__()
c) __convert__()
d) __format__()
Answer: a) __str__()
Explanation: The __str__() method is called when an object is passed to str() or printed. It provides a user-friendly string representation of the object.
What is the output of the following code?

go
Copy code
```python
python
Copy code
class A:
    def __init__(self, val):
        self.val = val

    def __str__(self):
        return f"A({self.val})"

a = A(5)
print(str(a))
```
- a) A(5)
- b) <A object>
- c) Error
- d) None  
Answer: a) A(5)
Explanation: The __str__() method provides a string representation of the object a. In this case, it returns the string "A(5)", which is printed.